import React from 'react';
import { FormProvider, useForm } from 'react-hook-form';
import { Button } from '@/shared/components/ui'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { TFormRegisterValues, formRegisterSchema } from './schemas';
import { zodResolver } from '@hookform/resolvers/zod';
import toast from 'react-hot-toast';
import { FormInput } from '@/shared/components';
import { CircleCheck, CircleAlert } from 'lucide-react';
import { registerUser } from '@/app/actions';

interface Props {
    onClose?: VoidFunction;
}

export function RegisterForm({ onClose }: Props) {
    const form = useForm<TFormRegisterValues>({
        resolver: zodResolver(formRegisterSchema),
        defaultValues: {
            email: '',
            firstName: '',
            password: '',
            confirmPassword: '',
        },
        mode: 'onBlur',
    });

    const onSubmit = async (data: TFormRegisterValues) => {
        try {
            await registerUser({
                email: data.email,
                firstName: data.firstName,
                password: data.password,
            });

            toast.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ üìù. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É', {
                icon: <CircleCheck className="text-green-500" />,
            });
            onClose?.();
        } catch (e) {
            const errorMessage = e instanceof Error ? e.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫';
            toast.error(errorMessage, {
                icon: <CircleAlert className="text-red-500" />,
            });
        }
    };

    return (
        <FormProvider {...form}>
            <form className="auth-form" onSubmit={form.handleSubmit(onSubmit)}>
                <div className="auth-form__header">
                    <p className="auth-form__header__subtitle">
                        –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, –∑–∞–ø–æ–ª–Ω–∏–≤ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ
                    </p>
                </div>

                <FormInput
                    className="auth-form__input-block"
                    name="email"
                    label="E-Mail"
                    type="email"
                    required
                />
                <FormInput
                    className="auth-form__input-block"
                    name="firstName"
                    label="–ò–º—è"
                    required
                />
                <FormInput
                    className="auth-form__input-block"
                    name="password"
                    label="–ü–∞—Ä–æ–ª—å"
                    type="password"
                    required
                />
                <FormInput
                    className="auth-form__input-block"
                    name="confirmPassword"
                    label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    type="password"
                    required
                />

                <Button
                    loading={form.formState.isSubmitting}
                    className="auth-form__submit-button"
                    type="submit"
                >
                    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </Button>
            </form>
        </FormProvider>
    );
}